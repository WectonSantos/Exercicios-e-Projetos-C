
projeto-prog-hardware.elf:     file format elf32-avr

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .data         00000002  00800100  00000264  000002d8  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  1 .text         00000264  00000000  00000000  00000074  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .comment      00000030  00000000  00000000  000002da  2**0
                  CONTENTS, READONLY
  3 .note.gnu.avr.deviceinfo 00000040  00000000  00000000  0000030c  2**2
                  CONTENTS, READONLY
  4 .debug_aranges 00000078  00000000  00000000  0000034c  2**0
                  CONTENTS, READONLY, DEBUGGING
  5 .debug_info   00000830  00000000  00000000  000003c4  2**0
                  CONTENTS, READONLY, DEBUGGING
  6 .debug_abbrev 000006af  00000000  00000000  00000bf4  2**0
                  CONTENTS, READONLY, DEBUGGING
  7 .debug_line   00000488  00000000  00000000  000012a3  2**0
                  CONTENTS, READONLY, DEBUGGING
  8 .debug_frame  000000d4  00000000  00000000  0000172c  2**2
                  CONTENTS, READONLY, DEBUGGING
  9 .debug_str    00000416  00000000  00000000  00001800  2**0
                  CONTENTS, READONLY, DEBUGGING
 10 .debug_loc    00000074  00000000  00000000  00001c16  2**0
                  CONTENTS, READONLY, DEBUGGING
 11 .debug_ranges 00000068  00000000  00000000  00001c8a  2**0
                  CONTENTS, READONLY, DEBUGGING

Disassembly of section .text:

00000000 <__vectors>:
   0:	0c 94 34 00 	jmp	0x68	; 0x68 <__ctors_end>
   4:	0c 94 49 00 	jmp	0x92	; 0x92 <__bad_interrupt>
   8:	0c 94 49 00 	jmp	0x92	; 0x92 <__bad_interrupt>
   c:	0c 94 49 00 	jmp	0x92	; 0x92 <__bad_interrupt>
  10:	0c 94 49 00 	jmp	0x92	; 0x92 <__bad_interrupt>
  14:	0c 94 49 00 	jmp	0x92	; 0x92 <__bad_interrupt>
  18:	0c 94 49 00 	jmp	0x92	; 0x92 <__bad_interrupt>
  1c:	0c 94 49 00 	jmp	0x92	; 0x92 <__bad_interrupt>
  20:	0c 94 49 00 	jmp	0x92	; 0x92 <__bad_interrupt>
  24:	0c 94 49 00 	jmp	0x92	; 0x92 <__bad_interrupt>
  28:	0c 94 49 00 	jmp	0x92	; 0x92 <__bad_interrupt>
  2c:	0c 94 49 00 	jmp	0x92	; 0x92 <__bad_interrupt>
  30:	0c 94 49 00 	jmp	0x92	; 0x92 <__bad_interrupt>
  34:	0c 94 49 00 	jmp	0x92	; 0x92 <__bad_interrupt>
  38:	0c 94 49 00 	jmp	0x92	; 0x92 <__bad_interrupt>
  3c:	0c 94 49 00 	jmp	0x92	; 0x92 <__bad_interrupt>
  40:	0c 94 49 00 	jmp	0x92	; 0x92 <__bad_interrupt>
  44:	0c 94 49 00 	jmp	0x92	; 0x92 <__bad_interrupt>
  48:	0c 94 49 00 	jmp	0x92	; 0x92 <__bad_interrupt>
  4c:	0c 94 49 00 	jmp	0x92	; 0x92 <__bad_interrupt>
  50:	0c 94 49 00 	jmp	0x92	; 0x92 <__bad_interrupt>
  54:	0c 94 49 00 	jmp	0x92	; 0x92 <__bad_interrupt>
  58:	0c 94 49 00 	jmp	0x92	; 0x92 <__bad_interrupt>
  5c:	0c 94 49 00 	jmp	0x92	; 0x92 <__bad_interrupt>
  60:	0c 94 49 00 	jmp	0x92	; 0x92 <__bad_interrupt>
  64:	0c 94 49 00 	jmp	0x92	; 0x92 <__bad_interrupt>

00000068 <__ctors_end>:
  68:	11 24       	eor	r1, r1
  6a:	1f be       	out	0x3f, r1	; 63
  6c:	cf ef       	ldi	r28, 0xFF	; 255
  6e:	d8 e0       	ldi	r29, 0x08	; 8
  70:	de bf       	out	0x3e, r29	; 62
  72:	cd bf       	out	0x3d, r28	; 61

00000074 <__do_copy_data>:
  74:	11 e0       	ldi	r17, 0x01	; 1
  76:	a0 e0       	ldi	r26, 0x00	; 0
  78:	b1 e0       	ldi	r27, 0x01	; 1
  7a:	e4 e6       	ldi	r30, 0x64	; 100
  7c:	f2 e0       	ldi	r31, 0x02	; 2
  7e:	02 c0       	rjmp	.+4      	; 0x84 <__do_copy_data+0x10>
  80:	05 90       	lpm	r0, Z+
  82:	0d 92       	st	X+, r0
  84:	a2 30       	cpi	r26, 0x02	; 2
  86:	b1 07       	cpc	r27, r17
  88:	d9 f7       	brne	.-10     	; 0x80 <__do_copy_data+0xc>
  8a:	0e 94 03 01 	call	0x206	; 0x206 <main>
  8e:	0c 94 30 01 	jmp	0x260	; 0x260 <_exit>

00000092 <__bad_interrupt>:
  92:	0c 94 00 00 	jmp	0	; 0x0 <__vectors>

00000096 <ledsVida>:
// LIMITE DE LUZ LDR
#define LIMIAR_LUZ 700

// ROTINA QUE CONFIGURA OS LEDS DE VIDA
void ledsVida(){
	DDRC |= (1 << PORTC0); // LED 1 (SAÍDA)
  96:	87 b1       	in	r24, 0x07	; 7
  98:	81 60       	ori	r24, 0x01	; 1
  9a:	87 b9       	out	0x07, r24	; 7
	DDRC |= (1 << PORTC1); // LED 2 (SAÍDA)
  9c:	87 b1       	in	r24, 0x07	; 7
  9e:	82 60       	ori	r24, 0x02	; 2
  a0:	87 b9       	out	0x07, r24	; 7
	DDRC |= (1 << PORTC2); // LED 3	(SAÍDA)
  a2:	87 b1       	in	r24, 0x07	; 7
  a4:	84 60       	ori	r24, 0x04	; 4
  a6:	87 b9       	out	0x07, r24	; 7
	
	PORTC |= (1<< PORTC0); // LIGANDO LED 1
  a8:	88 b1       	in	r24, 0x08	; 8
  aa:	81 60       	ori	r24, 0x01	; 1
  ac:	88 b9       	out	0x08, r24	; 8
	PORTC |= (1<< PORTC1); // LIGANDO LED 1
  ae:	88 b1       	in	r24, 0x08	; 8
  b0:	82 60       	ori	r24, 0x02	; 2
  b2:	88 b9       	out	0x08, r24	; 8
	PORTC |= (1<< PORTC2); // LIGANDO LED 1
  b4:	88 b1       	in	r24, 0x08	; 8
  b6:	84 60       	ori	r24, 0x04	; 4
  b8:	88 b9       	out	0x08, r24	; 8
  ba:	08 95       	ret

000000bc <motores>:

}
// ROTINA QUE CONFIGURA OS MOTORES
void motores(){
	DDRB |= (1 << PB7); // MOTOR 1 SENTIDO HORÁRIO
  bc:	84 b1       	in	r24, 0x04	; 4
  be:	80 68       	ori	r24, 0x80	; 128
  c0:	84 b9       	out	0x04, r24	; 4
	DDRB |= (1 << PB4); // MOTOR 1 SENTIDO ANTI-HORÁRIO
  c2:	84 b1       	in	r24, 0x04	; 4
  c4:	80 61       	ori	r24, 0x10	; 16
  c6:	84 b9       	out	0x04, r24	; 4
	DDRD |= (1 << PD5); // MOTOR 1 PWM
  c8:	8a b1       	in	r24, 0x0a	; 10
  ca:	80 62       	ori	r24, 0x20	; 32
  cc:	8a b9       	out	0x0a, r24	; 10
	
	DDRB |= (1 << PB5); // MOTOR 2 SENTIDO HORÁRIO
  ce:	84 b1       	in	r24, 0x04	; 4
  d0:	80 62       	ori	r24, 0x20	; 32
  d2:	84 b9       	out	0x04, r24	; 4
	DDRB |= (1 << PB0); // MOTOR 2 SENTIDO ANTI-HORÁRIO
  d4:	84 b1       	in	r24, 0x04	; 4
  d6:	81 60       	ori	r24, 0x01	; 1
  d8:	84 b9       	out	0x04, r24	; 4
	DDRD |= (1 << PD6); // MOTOR 2 PWM	
  da:	8a b1       	in	r24, 0x0a	; 10
  dc:	80 64       	ori	r24, 0x40	; 64
  de:	8a b9       	out	0x0a, r24	; 10
	
	//TESTE
    // IN1–IN4 como saída
    DDRB |= (1<<PB7)|(1<<PB4)|(1<<PB5)|(1<<PB0);
  e0:	84 b1       	in	r24, 0x04	; 4
  e2:	81 6b       	ori	r24, 0xB1	; 177
  e4:	84 b9       	out	0x04, r24	; 4
    // ENA (PD5) e ENB (PD6) como saída, mas sem setar PORTD ainda
    DDRD |= (1<<PD5)|(1<<PD6);
  e6:	8a b1       	in	r24, 0x0a	; 10
  e8:	80 66       	ori	r24, 0x60	; 96
  ea:	8a b9       	out	0x0a, r24	; 10
  ec:	08 95       	ret

000000ee <botoes>:
	//TESTE
}

// BOTÕES PREVIAMENTE QUE SERÃO TROCADOS PELO VALOR RECEBIDO DO CONTROLE
void botoes(){
	DDRB &= ~(1 << PORTB1);
  ee:	84 b1       	in	r24, 0x04	; 4
  f0:	8d 7f       	andi	r24, 0xFD	; 253
  f2:	84 b9       	out	0x04, r24	; 4
	DDRB &= ~(1 << PORTB2);
  f4:	84 b1       	in	r24, 0x04	; 4
  f6:	8b 7f       	andi	r24, 0xFB	; 251
  f8:	84 b9       	out	0x04, r24	; 4
	DDRD &= ~(1 << PORTD4);
  fa:	8a b1       	in	r24, 0x0a	; 10
  fc:	8f 7e       	andi	r24, 0xEF	; 239
  fe:	8a b9       	out	0x0a, r24	; 10
 100:	08 95       	ret

00000102 <laser>:
}

// ROTINA QUE CONFIGURA O LASER
void laser(){
	DDRB |= (1 << PORTB3); // LASER PORTA B3 (CTC)
 102:	84 b1       	in	r24, 0x04	; 4
 104:	88 60       	ori	r24, 0x08	; 8
 106:	84 b9       	out	0x04, r24	; 4
 108:	08 95       	ret

0000010a <adc_init>:
}

// ROTINA LDR
void adc_init(void) {
	// Referência AVcc (5V), canal ADC4, right adjust
	ADMUX = (1 << REFS0); // AVcc como referência, canal será configurado na leitura
 10a:	80 e4       	ldi	r24, 0x40	; 64
 10c:	80 93 7c 00 	sts	0x007C, r24	; 0x80007c <__TEXT_REGION_LENGTH__+0x7f807c>
	ADCSRA = (1 << ADEN)  // habilita ADC
 110:	87 e8       	ldi	r24, 0x87	; 135
 112:	80 93 7a 00 	sts	0x007A, r24	; 0x80007a <__TEXT_REGION_LENGTH__+0x7f807a>
	| (1 << ADPS2) | (1 << ADPS1) | (1 << ADPS0); // prescaler 128 (16MHz/128=125kHz)
	DIDR0 = (1 << ADC4D); // desativa entrada digital no PC4
 116:	80 e1       	ldi	r24, 0x10	; 16
 118:	80 93 7e 00 	sts	0x007E, r24	; 0x80007e <__TEXT_REGION_LENGTH__+0x7f807e>
 11c:	08 95       	ret

0000011e <adc_read>:
}

uint16_t adc_read(uint8_t canal) {
	// seleciona o canal (0–7)
	ADMUX = (ADMUX & 0xF0) | (canal & 0x0F);
 11e:	ec e7       	ldi	r30, 0x7C	; 124
 120:	f0 e0       	ldi	r31, 0x00	; 0
 122:	90 81       	ld	r25, Z
 124:	90 7f       	andi	r25, 0xF0	; 240
 126:	8f 70       	andi	r24, 0x0F	; 15
 128:	89 2b       	or	r24, r25
 12a:	80 83       	st	Z, r24
	// inicia conversão
	ADCSRA |= (1 << ADSC);
 12c:	ea e7       	ldi	r30, 0x7A	; 122
 12e:	f0 e0       	ldi	r31, 0x00	; 0
 130:	80 81       	ld	r24, Z
 132:	80 64       	ori	r24, 0x40	; 64
 134:	80 83       	st	Z, r24
	// espera terminar
	while (ADCSRA & (1 << ADSC));
 136:	80 91 7a 00 	lds	r24, 0x007A	; 0x80007a <__TEXT_REGION_LENGTH__+0x7f807a>
 13a:	86 fd       	sbrc	r24, 6
 13c:	fc cf       	rjmp	.-8      	; 0x136 <adc_read+0x18>
	// retorna valor 0–1023
	return ADC;
 13e:	80 91 78 00 	lds	r24, 0x0078	; 0x800078 <__TEXT_REGION_LENGTH__+0x7f8078>
 142:	90 91 79 00 	lds	r25, 0x0079	; 0x800079 <__TEXT_REGION_LENGTH__+0x7f8079>
}
 146:	08 95       	ret

00000148 <atualizaLedsVida>:

void atualizaLedsVida() {
	if (vidas >= 3){
 148:	80 91 00 01 	lds	r24, 0x0100	; 0x800100 <__DATA_REGION_ORIGIN__>
 14c:	83 30       	cpi	r24, 0x03	; 3
 14e:	20 f0       	brcs	.+8      	; 0x158 <atualizaLedsVida+0x10>
		PORTC |= (1 << PORTC0) | (1 << PORTC1) | (1 << PORTC2);
 150:	88 b1       	in	r24, 0x08	; 8
 152:	87 60       	ori	r24, 0x07	; 7
 154:	88 b9       	out	0x08, r24	; 8
 156:	08 95       	ret
	}else if (vidas == 2) {
 158:	82 30       	cpi	r24, 0x02	; 2
 15a:	39 f4       	brne	.+14     	; 0x16a <atualizaLedsVida+0x22>
		PORTC |= (1 << PORTC1) | (1 << PORTC2);
 15c:	88 b1       	in	r24, 0x08	; 8
 15e:	86 60       	ori	r24, 0x06	; 6
 160:	88 b9       	out	0x08, r24	; 8
		PORTC &= ~(1 << PORTC0);
 162:	88 b1       	in	r24, 0x08	; 8
 164:	8e 7f       	andi	r24, 0xFE	; 254
 166:	88 b9       	out	0x08, r24	; 8
 168:	08 95       	ret
	}else if (vidas == 1) {
 16a:	81 30       	cpi	r24, 0x01	; 1
 16c:	39 f4       	brne	.+14     	; 0x17c <atualizaLedsVida+0x34>
		PORTC |= (1 << PORTC2);
 16e:	88 b1       	in	r24, 0x08	; 8
 170:	84 60       	ori	r24, 0x04	; 4
 172:	88 b9       	out	0x08, r24	; 8
		PORTC &= ~((1 << PORTC0) | (1 << PORTC1));
 174:	88 b1       	in	r24, 0x08	; 8
 176:	8c 7f       	andi	r24, 0xFC	; 252
 178:	88 b9       	out	0x08, r24	; 8
 17a:	08 95       	ret
	}else{
		PORTC &= ~((1 << PORTC0) | (1 << PORTC1) | (1 << PORTC2));
 17c:	88 b1       	in	r24, 0x08	; 8
 17e:	88 7f       	andi	r24, 0xF8	; 248
 180:	88 b9       	out	0x08, r24	; 8
 182:	08 95       	ret

00000184 <ligaMotoresHorario>:
}
// FIM ROTINA LDR


void ligaMotoresHorario(){
	if (PIND & (1<<PD4)) {
 184:	4c 9b       	sbis	0x09, 4	; 9
 186:	0a c0       	rjmp	.+20     	; 0x19c <ligaMotoresHorario+0x18>
			
		// define direção: IN1=1, IN2=0 ; IN3=1, IN4=0
		PORTB |=  (1<<PB7)|(1<<PB5);
 188:	85 b1       	in	r24, 0x05	; 5
 18a:	80 6a       	ori	r24, 0xA0	; 160
 18c:	85 b9       	out	0x05, r24	; 5
		PORTB &= ~((1<<PB4)|(1<<PB0));
 18e:	85 b1       	in	r24, 0x05	; 5
 190:	8e 7e       	andi	r24, 0xEE	; 238
 192:	85 b9       	out	0x05, r24	; 5

		// liga PWM nos enables
		OCR0B = 200;   // duty motor 1 (ajuste entre 0–255)
 194:	88 ec       	ldi	r24, 0xC8	; 200
 196:	88 bd       	out	0x28, r24	; 40
		OCR0A = 200;   // duty motor 2
 198:	87 bd       	out	0x27, r24	; 39
 19a:	08 95       	ret
	}
	else {
		// desliga PWM (motores parados)
		OCR0B = 0;
 19c:	18 bc       	out	0x28, r1	; 40
		OCR0A = 0;
 19e:	17 bc       	out	0x27, r1	; 39

		// opcional: deixa INx em 0 para garantir motor livre
		PORTB &= ~((1<<PB7)|(1<<PB5));
 1a0:	85 b1       	in	r24, 0x05	; 5
 1a2:	8f 75       	andi	r24, 0x5F	; 95
 1a4:	85 b9       	out	0x05, r24	; 5
 1a6:	08 95       	ret

000001a8 <ligaMotoresAntiHorario>:
	}	
}

void ligaMotoresAntiHorario(){
	if (PINB & (1<<PB1)) {
 1a8:	19 9b       	sbis	0x03, 1	; 3
 1aa:	0a c0       	rjmp	.+20     	; 0x1c0 <ligaMotoresAntiHorario+0x18>
		
		// define direção: IN1=1, IN2=0 ; IN3=1, IN4=0
		PORTB |=  (1<<PB4)|(1<<PB0);
 1ac:	85 b1       	in	r24, 0x05	; 5
 1ae:	81 61       	ori	r24, 0x11	; 17
 1b0:	85 b9       	out	0x05, r24	; 5
		PORTB &= ~((1<<PB7)|(1<<PB5));
 1b2:	85 b1       	in	r24, 0x05	; 5
 1b4:	8f 75       	andi	r24, 0x5F	; 95
 1b6:	85 b9       	out	0x05, r24	; 5

		// liga PWM nos enables
		OCR0B = 200;   // duty motor 1 (ajuste entre 0–255)
 1b8:	88 ec       	ldi	r24, 0xC8	; 200
 1ba:	88 bd       	out	0x28, r24	; 40
		OCR0A = 200;   // duty motor 2
 1bc:	87 bd       	out	0x27, r24	; 39
 1be:	08 95       	ret
	}
	else {
		// desliga PWM (motores parados)
		OCR0B = 0;
 1c0:	18 bc       	out	0x28, r1	; 40
		OCR0A = 0;
 1c2:	17 bc       	out	0x27, r1	; 39

		// opcional: deixa INx em 0 para garantir motor livre
		PORTB &= ~((1<<PB7)|(1<<PB5));
 1c4:	85 b1       	in	r24, 0x05	; 5
 1c6:	8f 75       	andi	r24, 0x5F	; 95
 1c8:	85 b9       	out	0x05, r24	; 5
 1ca:	08 95       	ret

000001cc <pwm_motores_50pct>:

//TESTE 50%
void pwm_motores_50pct(void) {
	// 2) Fast PWM: WGM00=1, WGM01=1 (mode 3)
	//    non-inverting: COM0A1=1, COM0B1=1
	TCCR0A  = (1<<WGM00) | (1<<WGM01)
 1cc:	83 ea       	ldi	r24, 0xA3	; 163
 1ce:	84 bd       	out	0x24, r24	; 36
	| (1<<COM0A1) | (1<<COM0B1);

	// 3) Prescaler 8 ? CS01=1 (PWM freq ~31 kHz)
	TCCR0B  = (1<<CS01);
 1d0:	82 e0       	ldi	r24, 0x02	; 2
 1d2:	85 bd       	out	0x25, r24	; 37

	// 4) Duty = 50% ? OCRx = TOP/2 = 255/2 ? 128
	OCR0A = 128;   // canal A (motor 2)
 1d4:	80 e8       	ldi	r24, 0x80	; 128
 1d6:	87 bd       	out	0x27, r24	; 39
	OCR0B = 128;   // canal B (motor 1)
 1d8:	88 bd       	out	0x28, r24	; 40
 1da:	08 95       	ret

000001dc <verificaSentido>:
}
//TESTE 50%

void verificaSentido(){
	if (PIND & (1 << PD4)) {
 1dc:	4c 9b       	sbis	0x09, 4	; 9
 1de:	03 c0       	rjmp	.+6      	; 0x1e6 <verificaSentido+0xa>
		ligaMotoresHorario();
 1e0:	0e 94 c2 00 	call	0x184	; 0x184 <ligaMotoresHorario>
 1e4:	08 95       	ret
	}
	else if (PINB & (1 << PB1)) {
 1e6:	19 9b       	sbis	0x03, 1	; 3
 1e8:	03 c0       	rjmp	.+6      	; 0x1f0 <verificaSentido+0x14>
		ligaMotoresAntiHorario();
 1ea:	0e 94 d4 00 	call	0x1a8	; 0x1a8 <ligaMotoresAntiHorario>
 1ee:	08 95       	ret
	}else if (PINB & (1 << PB2)){
 1f0:	1a 9b       	sbis	0x03, 2	; 3
 1f2:	03 c0       	rjmp	.+6      	; 0x1fa <verificaSentido+0x1e>
		pwm_motores_50pct();
 1f4:	0e 94 e6 00 	call	0x1cc	; 0x1cc <pwm_motores_50pct>
 1f8:	08 95       	ret
	}
	else {
		// Nenhum botão pressionado ? garantir que motores estão parados
		OCR0A = 0;
 1fa:	17 bc       	out	0x27, r1	; 39
		OCR0B = 0;
 1fc:	18 bc       	out	0x28, r1	; 40
		PORTB &= ~((1 << PB7) | (1 << PB5) | (1 << PB4) | (1 << PB0));
 1fe:	85 b1       	in	r24, 0x05	; 5
 200:	8e 74       	andi	r24, 0x4E	; 78
 202:	85 b9       	out	0x05, r24	; 5
 204:	08 95       	ret

00000206 <main>:
}

int main(void)
{
	// SETANDO TODAS AS PORTAS
	ledsVida(); 
 206:	0e 94 4b 00 	call	0x96	; 0x96 <ledsVida>
	motores(); 
 20a:	0e 94 5e 00 	call	0xbc	; 0xbc <motores>
	botoes(); 
 20e:	0e 94 77 00 	call	0xee	; 0xee <botoes>
	laser(); 
 212:	0e 94 81 00 	call	0x102	; 0x102 <laser>
	
	// ROTINA LDR
	adc_init();
 216:	0e 94 85 00 	call	0x10a	; 0x10a <adc_init>
	uint16_t valorLDR;
	uint8_t luzAlta = 0; 
	// FIM ROTINA LDR

	//TESTE
	PORTB &= ~((1 << PB7) | (1 << PB5) | (1 << PB4) | (1 << PB0));
 21a:	85 b1       	in	r24, 0x05	; 5
 21c:	8e 74       	andi	r24, 0x4E	; 78
 21e:	85 b9       	out	0x05, r24	; 5
    // configura Fast PWM no Timer0
    TCCR0A = (1<<COM0A1)|(1<<COM0B1)|(1<<WGM01)|(1<<WGM00);
 220:	83 ea       	ldi	r24, 0xA3	; 163
 222:	84 bd       	out	0x24, r24	; 36
    TCCR0B = (1<<CS01);    // prescaler = 8
 224:	82 e0       	ldi	r24, 0x02	; 2
 226:	85 bd       	out	0x25, r24	; 37

    // começa com duty = 0 (motores desligados)
    OCR0A = 0;  // canal OC0A ? motor 2
 228:	17 bc       	out	0x27, r1	; 39
    OCR0B = 0;  // canal OC0B ? motor 1
 22a:	18 bc       	out	0x28, r1	; 40
	//TESTE

    while (1) 
    {
		//ROTINA LDR
		valorLDR = adc_read(4); // lê o ADC4 (PC4)
 22c:	84 e0       	ldi	r24, 0x04	; 4
 22e:	0e 94 8f 00 	call	0x11e	; 0x11e <adc_read>

		if (valorLDR > LIMIAR_LUZ) {
 232:	8d 3b       	cpi	r24, 0xBD	; 189
 234:	92 40       	sbci	r25, 0x02	; 2
 236:	28 f0       	brcs	.+10     	; 0x242 <main+0x3c>
			luzAlta = 1; // LDR recebeu valor alto
			PORTB |= (1 << PORTB3);
 238:	85 b1       	in	r24, 0x05	; 5
 23a:	88 60       	ori	r24, 0x08	; 8
 23c:	85 b9       	out	0x05, r24	; 5
    {
		//ROTINA LDR
		valorLDR = adc_read(4); // lê o ADC4 (PC4)

		if (valorLDR > LIMIAR_LUZ) {
			luzAlta = 1; // LDR recebeu valor alto
 23e:	81 e0       	ldi	r24, 0x01	; 1
 240:	01 c0       	rjmp	.+2      	; 0x244 <main+0x3e>
			PORTB |= (1 << PORTB3);
			} else {
			luzAlta = 0; 
 242:	80 e0       	ldi	r24, 0x00	; 0
		}
		if (luzAlta){
 244:	88 23       	and	r24, r24
 246:	39 f0       	breq	.+14     	; 0x256 <main+0x50>
			if(vidas>0){
 248:	80 91 00 01 	lds	r24, 0x0100	; 0x800100 <__DATA_REGION_ORIGIN__>
 24c:	88 23       	and	r24, r24
 24e:	19 f0       	breq	.+6      	; 0x256 <main+0x50>
			vidas = vidas -1;
 250:	81 50       	subi	r24, 0x01	; 1
 252:	80 93 00 01 	sts	0x0100, r24	; 0x800100 <__DATA_REGION_ORIGIN__>
			}
		}
		atualizaLedsVida();
 256:	0e 94 a4 00 	call	0x148	; 0x148 <atualizaLedsVida>
			PORTB |= (1 << PORTB7);
			PORTB |= (1 << PORTB5);
		}*/
		
		//TESTE
		verificaSentido();								
 25a:	0e 94 ee 00 	call	0x1dc	; 0x1dc <verificaSentido>
		//TESTE
		
		
    }
 25e:	e6 cf       	rjmp	.-52     	; 0x22c <main+0x26>

00000260 <_exit>:
 260:	f8 94       	cli

00000262 <__stop_program>:
 262:	ff cf       	rjmp	.-2      	; 0x262 <__stop_program>
