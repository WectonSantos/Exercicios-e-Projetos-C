
projeto-prog-hardware.elf:     file format elf32-avr

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .data         0000000e  00800100  000004be  00000532  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  1 .text         000004be  00000000  00000000  00000074  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .comment      00000030  00000000  00000000  00000540  2**0
                  CONTENTS, READONLY
  3 .note.gnu.avr.deviceinfo 00000040  00000000  00000000  00000570  2**2
                  CONTENTS, READONLY
  4 .debug_aranges 000000d0  00000000  00000000  000005b0  2**0
                  CONTENTS, READONLY, DEBUGGING
  5 .debug_info   00000acb  00000000  00000000  00000680  2**0
                  CONTENTS, READONLY, DEBUGGING
  6 .debug_abbrev 000007b7  00000000  00000000  0000114b  2**0
                  CONTENTS, READONLY, DEBUGGING
  7 .debug_line   00000664  00000000  00000000  00001902  2**0
                  CONTENTS, READONLY, DEBUGGING
  8 .debug_frame  000001b4  00000000  00000000  00001f68  2**2
                  CONTENTS, READONLY, DEBUGGING
  9 .debug_str    000004cf  00000000  00000000  0000211c  2**0
                  CONTENTS, READONLY, DEBUGGING
 10 .debug_loc    000001dc  00000000  00000000  000025eb  2**0
                  CONTENTS, READONLY, DEBUGGING
 11 .debug_ranges 000000c0  00000000  00000000  000027c7  2**0
                  CONTENTS, READONLY, DEBUGGING

Disassembly of section .text:

00000000 <__vectors>:
   0:	0c 94 65 00 	jmp	0xca	; 0xca <__ctors_end>
   4:	0c 94 7a 00 	jmp	0xf4	; 0xf4 <__bad_interrupt>
   8:	0c 94 7a 00 	jmp	0xf4	; 0xf4 <__bad_interrupt>
   c:	0c 94 7a 00 	jmp	0xf4	; 0xf4 <__bad_interrupt>
  10:	0c 94 7a 00 	jmp	0xf4	; 0xf4 <__bad_interrupt>
  14:	0c 94 7a 00 	jmp	0xf4	; 0xf4 <__bad_interrupt>
  18:	0c 94 7a 00 	jmp	0xf4	; 0xf4 <__bad_interrupt>
  1c:	0c 94 7a 00 	jmp	0xf4	; 0xf4 <__bad_interrupt>
  20:	0c 94 7a 00 	jmp	0xf4	; 0xf4 <__bad_interrupt>
  24:	0c 94 7a 00 	jmp	0xf4	; 0xf4 <__bad_interrupt>
  28:	0c 94 7a 00 	jmp	0xf4	; 0xf4 <__bad_interrupt>
  2c:	0c 94 52 01 	jmp	0x2a4	; 0x2a4 <__vector_11>
  30:	0c 94 7a 00 	jmp	0xf4	; 0xf4 <__bad_interrupt>
  34:	0c 94 7a 00 	jmp	0xf4	; 0xf4 <__bad_interrupt>
  38:	0c 94 7a 00 	jmp	0xf4	; 0xf4 <__bad_interrupt>
  3c:	0c 94 7a 00 	jmp	0xf4	; 0xf4 <__bad_interrupt>
  40:	0c 94 7a 00 	jmp	0xf4	; 0xf4 <__bad_interrupt>
  44:	0c 94 7a 00 	jmp	0xf4	; 0xf4 <__bad_interrupt>
  48:	0c 94 7a 00 	jmp	0xf4	; 0xf4 <__bad_interrupt>
  4c:	0c 94 7a 00 	jmp	0xf4	; 0xf4 <__bad_interrupt>
  50:	0c 94 7a 00 	jmp	0xf4	; 0xf4 <__bad_interrupt>
  54:	0c 94 7a 00 	jmp	0xf4	; 0xf4 <__bad_interrupt>
  58:	0c 94 7a 00 	jmp	0xf4	; 0xf4 <__bad_interrupt>
  5c:	0c 94 7a 00 	jmp	0xf4	; 0xf4 <__bad_interrupt>
  60:	0c 94 7a 00 	jmp	0xf4	; 0xf4 <__bad_interrupt>
  64:	0c 94 7a 00 	jmp	0xf4	; 0xf4 <__bad_interrupt>
  68:	bc 01       	movw	r22, r24
  6a:	ce 01       	movw	r24, r28
  6c:	ce 01       	movw	r24, r28
  6e:	ce 01       	movw	r24, r28
  70:	b6 01       	movw	r22, r12
  72:	ce 01       	movw	r24, r28
  74:	ce 01       	movw	r24, r28
  76:	ce 01       	movw	r24, r28
  78:	ce 01       	movw	r24, r28
  7a:	ce 01       	movw	r24, r28
  7c:	c2 01       	movw	r24, r4
  7e:	ce 01       	movw	r24, r28
  80:	ce 01       	movw	r24, r28
  82:	ce 01       	movw	r24, r28
  84:	ce 01       	movw	r24, r28
  86:	ce 01       	movw	r24, r28
  88:	c8 01       	movw	r24, r16
  8a:	ce 01       	movw	r24, r28
  8c:	ce 01       	movw	r24, r28
  8e:	ce 01       	movw	r24, r28
  90:	ce 01       	movw	r24, r28
  92:	ce 01       	movw	r24, r28
  94:	ce 01       	movw	r24, r28
  96:	ce 01       	movw	r24, r28
  98:	ce 01       	movw	r24, r28
  9a:	ce 01       	movw	r24, r28
  9c:	ce 01       	movw	r24, r28
  9e:	ce 01       	movw	r24, r28
  a0:	ce 01       	movw	r24, r28
  a2:	ce 01       	movw	r24, r28
  a4:	ce 01       	movw	r24, r28
  a6:	ce 01       	movw	r24, r28
  a8:	bc 01       	movw	r22, r24
  aa:	ce 01       	movw	r24, r28
  ac:	ce 01       	movw	r24, r28
  ae:	ce 01       	movw	r24, r28
  b0:	b6 01       	movw	r22, r12
  b2:	ce 01       	movw	r24, r28
  b4:	ce 01       	movw	r24, r28
  b6:	ce 01       	movw	r24, r28
  b8:	ce 01       	movw	r24, r28
  ba:	ce 01       	movw	r24, r28
  bc:	c2 01       	movw	r24, r4
  be:	ce 01       	movw	r24, r28
  c0:	ce 01       	movw	r24, r28
  c2:	ce 01       	movw	r24, r28
  c4:	ce 01       	movw	r24, r28
  c6:	ce 01       	movw	r24, r28
  c8:	c8 01       	movw	r24, r16

000000ca <__ctors_end>:
  ca:	11 24       	eor	r1, r1
  cc:	1f be       	out	0x3f, r1	; 63
  ce:	cf ef       	ldi	r28, 0xFF	; 255
  d0:	d8 e0       	ldi	r29, 0x08	; 8
  d2:	de bf       	out	0x3e, r29	; 62
  d4:	cd bf       	out	0x3d, r28	; 61

000000d6 <__do_copy_data>:
  d6:	11 e0       	ldi	r17, 0x01	; 1
  d8:	a0 e0       	ldi	r26, 0x00	; 0
  da:	b1 e0       	ldi	r27, 0x01	; 1
  dc:	ee eb       	ldi	r30, 0xBE	; 190
  de:	f4 e0       	ldi	r31, 0x04	; 4
  e0:	02 c0       	rjmp	.+4      	; 0xe6 <__do_copy_data+0x10>
  e2:	05 90       	lpm	r0, Z+
  e4:	0d 92       	st	X+, r0
  e6:	ae 30       	cpi	r26, 0x0E	; 14
  e8:	b1 07       	cpc	r27, r17
  ea:	d9 f7       	brne	.-10     	; 0xe2 <__do_copy_data+0xc>
  ec:	0e 94 d1 01 	call	0x3a2	; 0x3a2 <main>
  f0:	0c 94 5d 02 	jmp	0x4ba	; 0x4ba <_exit>

000000f4 <__bad_interrupt>:
  f4:	0c 94 00 00 	jmp	0	; 0x0 <__vectors>

000000f8 <ledsVida>:

uint8_t vidas = 3;

// ROTINA QUE CONFIGURA OS LEDS DE VIDA
void ledsVida(){
	DDRC |= (1 << PC0); // LED 1 (SAÍDA)
  f8:	87 b1       	in	r24, 0x07	; 7
  fa:	81 60       	ori	r24, 0x01	; 1
  fc:	87 b9       	out	0x07, r24	; 7
	DDRC |= (1 << PC1); // LED 2 (SAÍDA)
  fe:	87 b1       	in	r24, 0x07	; 7
 100:	82 60       	ori	r24, 0x02	; 2
 102:	87 b9       	out	0x07, r24	; 7
	DDRC |= (1 << PC2); // LED 3	(SAÍDA)
 104:	87 b1       	in	r24, 0x07	; 7
 106:	84 60       	ori	r24, 0x04	; 4
 108:	87 b9       	out	0x07, r24	; 7
	
	PORTC |= (1<< PC0); // LIGANDO LED 1
 10a:	88 b1       	in	r24, 0x08	; 8
 10c:	81 60       	ori	r24, 0x01	; 1
 10e:	88 b9       	out	0x08, r24	; 8
	PORTC |= (1<< PC1); // LIGANDO LED 1
 110:	88 b1       	in	r24, 0x08	; 8
 112:	82 60       	ori	r24, 0x02	; 2
 114:	88 b9       	out	0x08, r24	; 8
	PORTC |= (1<< PC2); // LIGANDO LED 1
 116:	88 b1       	in	r24, 0x08	; 8
 118:	84 60       	ori	r24, 0x04	; 4
 11a:	88 b9       	out	0x08, r24	; 8
 11c:	08 95       	ret

0000011e <motores>:
}
// ROTINA QUE CONFIGURA OS MOTORES
void motores(){
	DDRB |= (1 << PB7); // MOTOR 1 SENTIDO HORÁRIO
 11e:	84 b1       	in	r24, 0x04	; 4
 120:	80 68       	ori	r24, 0x80	; 128
 122:	84 b9       	out	0x04, r24	; 4
	DDRB |= (1 << PB4); // MOTOR 1 SENTIDO ANTI-HORÁRIO
 124:	84 b1       	in	r24, 0x04	; 4
 126:	80 61       	ori	r24, 0x10	; 16
 128:	84 b9       	out	0x04, r24	; 4
	DDRD |= (1 << PD5); // MOTOR 1 PWM
 12a:	8a b1       	in	r24, 0x0a	; 10
 12c:	80 62       	ori	r24, 0x20	; 32
 12e:	8a b9       	out	0x0a, r24	; 10
	
	DDRB |= (1 << PB5); // MOTOR 2 SENTIDO HORÁRIO
 130:	84 b1       	in	r24, 0x04	; 4
 132:	80 62       	ori	r24, 0x20	; 32
 134:	84 b9       	out	0x04, r24	; 4
	DDRB |= (1 << PB0); // MOTOR 2 SENTIDO ANTI-HORÁRIO
 136:	84 b1       	in	r24, 0x04	; 4
 138:	81 60       	ori	r24, 0x01	; 1
 13a:	84 b9       	out	0x04, r24	; 4
	DDRD |= (1 << PD6); // MOTOR 2 PWM	
 13c:	8a b1       	in	r24, 0x0a	; 10
 13e:	80 64       	ori	r24, 0x40	; 64
 140:	8a b9       	out	0x0a, r24	; 10
	
	//TESTE
    // IN1–IN4 como saída
    DDRB |= (1<<PB7)|(1<<PB4)|(1<<PB5)|(1<<PB0);
 142:	84 b1       	in	r24, 0x04	; 4
 144:	81 6b       	ori	r24, 0xB1	; 177
 146:	84 b9       	out	0x04, r24	; 4
    // ENA (PD5) e ENB (PD6) como saída, mas sem setar PORTD ainda
    DDRD |= (1<<PD5)|(1<<PD6);
 148:	8a b1       	in	r24, 0x0a	; 10
 14a:	80 66       	ori	r24, 0x60	; 96
 14c:	8a b9       	out	0x0a, r24	; 10
 14e:	08 95       	ret

00000150 <botoes>:
	//TESTE
}

// BOTÕES PREVIAMENTE QUE SERÃO TROCADOS PELO VALOR RECEBIDO DO CONTROLE
void botoes(){
	DDRB &= ~(1 << PB1);
 150:	84 b1       	in	r24, 0x04	; 4
 152:	8d 7f       	andi	r24, 0xFD	; 253
 154:	84 b9       	out	0x04, r24	; 4
	DDRB &= ~(1 << PB2);
 156:	84 b1       	in	r24, 0x04	; 4
 158:	8b 7f       	andi	r24, 0xFB	; 251
 15a:	84 b9       	out	0x04, r24	; 4
	DDRD &= ~(1 << PD4);
 15c:	8a b1       	in	r24, 0x0a	; 10
 15e:	8f 7e       	andi	r24, 0xEF	; 239
 160:	8a b9       	out	0x0a, r24	; 10
 162:	08 95       	ret

00000164 <laser>:
}

// ROTINA QUE CONFIGURA O LASER
void laser(){
	DDRB |= (1 << PB3); // LASER PORTA B3 (CTC)
 164:	84 b1       	in	r24, 0x04	; 4
 166:	88 60       	ori	r24, 0x08	; 8
 168:	84 b9       	out	0x04, r24	; 4
 16a:	08 95       	ret

0000016c <adc_init>:
}

// ROTINA LDR

void adc_init(void) {
	ADMUX = (1 << REFS0); 
 16c:	80 e4       	ldi	r24, 0x40	; 64
 16e:	80 93 7c 00 	sts	0x007C, r24	; 0x80007c <__TEXT_REGION_LENGTH__+0x7f807c>
	ADCSRA = (1 << ADEN) | (1 << ADPS2) | (1 << ADPS1) | (1 << ADPS0); // prescaler 128 (16MHz/128=125kHz)
 172:	87 e8       	ldi	r24, 0x87	; 135
 174:	80 93 7a 00 	sts	0x007A, r24	; 0x80007a <__TEXT_REGION_LENGTH__+0x7f807a>
 178:	08 95       	ret

0000017a <adc_read>:
	//DDRC &= ~(1 << PC4); 
}

uint16_t adc_read(uint8_t canal) {
	//ADMUX = (1 << REFS0) | (canal & 0x0F);
	ADMUX = (ADMUX & 0xF0) | (canal & 0x0f);
 17a:	ec e7       	ldi	r30, 0x7C	; 124
 17c:	f0 e0       	ldi	r31, 0x00	; 0
 17e:	90 81       	ld	r25, Z
 180:	90 7f       	andi	r25, 0xF0	; 240
 182:	8f 70       	andi	r24, 0x0F	; 15
 184:	89 2b       	or	r24, r25
 186:	80 83       	st	Z, r24
	ADCSRA |= (1 << ADSC);
 188:	ea e7       	ldi	r30, 0x7A	; 122
 18a:	f0 e0       	ldi	r31, 0x00	; 0
 18c:	80 81       	ld	r24, Z
 18e:	80 64       	ori	r24, 0x40	; 64
 190:	80 83       	st	Z, r24
	while (ADCSRA & (1 << ADSC));
 192:	80 91 7a 00 	lds	r24, 0x007A	; 0x80007a <__TEXT_REGION_LENGTH__+0x7f807a>
 196:	86 fd       	sbrc	r24, 6
 198:	fc cf       	rjmp	.-8      	; 0x192 <adc_read+0x18>
	return ADC; 
 19a:	80 91 78 00 	lds	r24, 0x0078	; 0x800078 <__TEXT_REGION_LENGTH__+0x7f8078>
 19e:	90 91 79 00 	lds	r25, 0x0079	; 0x800079 <__TEXT_REGION_LENGTH__+0x7f8079>
}
 1a2:	08 95       	ret

000001a4 <atualizaLedsVida>:


void atualizaLedsVida() {
	if (vidas >= 3){
 1a4:	80 91 00 01 	lds	r24, 0x0100	; 0x800100 <__DATA_REGION_ORIGIN__>
 1a8:	83 30       	cpi	r24, 0x03	; 3
 1aa:	20 f0       	brcs	.+8      	; 0x1b4 <atualizaLedsVida+0x10>
		PORTC |= (1 << PC0) | (1 << PC1) | (1 << PC2);
 1ac:	88 b1       	in	r24, 0x08	; 8
 1ae:	87 60       	ori	r24, 0x07	; 7
 1b0:	88 b9       	out	0x08, r24	; 8
 1b2:	08 95       	ret
	}else if (vidas == 2) {
 1b4:	82 30       	cpi	r24, 0x02	; 2
 1b6:	39 f4       	brne	.+14     	; 0x1c6 <atualizaLedsVida+0x22>
		PORTC |= (1 << PC1) | (1 << PC2);
 1b8:	88 b1       	in	r24, 0x08	; 8
 1ba:	86 60       	ori	r24, 0x06	; 6
 1bc:	88 b9       	out	0x08, r24	; 8
		PORTC &= ~(1 << PC0);
 1be:	88 b1       	in	r24, 0x08	; 8
 1c0:	8e 7f       	andi	r24, 0xFE	; 254
 1c2:	88 b9       	out	0x08, r24	; 8
 1c4:	08 95       	ret
	}else if (vidas == 1) {
 1c6:	81 30       	cpi	r24, 0x01	; 1
 1c8:	39 f4       	brne	.+14     	; 0x1d8 <atualizaLedsVida+0x34>
		PORTC |= (1 << PC2);
 1ca:	88 b1       	in	r24, 0x08	; 8
 1cc:	84 60       	ori	r24, 0x04	; 4
 1ce:	88 b9       	out	0x08, r24	; 8
		PORTC &= ~((1 << PC0) | (1 << PC1));
 1d0:	88 b1       	in	r24, 0x08	; 8
 1d2:	8c 7f       	andi	r24, 0xFC	; 252
 1d4:	88 b9       	out	0x08, r24	; 8
 1d6:	08 95       	ret
	}else{
		PORTC &= ~((1 << PC0) | (1 << PC1) | (1 << PC2));
 1d8:	88 b1       	in	r24, 0x08	; 8
 1da:	88 7f       	andi	r24, 0xF8	; 248
 1dc:	88 b9       	out	0x08, r24	; 8
 1de:	08 95       	ret

000001e0 <ligaMotoresHorario>:
// FIM ROTINA LDR

// ROTINA DOS MOTORES
void ligaMotoresHorario(){		
	// DEFINE DIREÇÃO: IN1=1, IN2=0 ; IN3=1, IN4=0
	PORTB |=  (1<<PB7)|(1<<PB5);
 1e0:	85 b1       	in	r24, 0x05	; 5
 1e2:	80 6a       	ori	r24, 0xA0	; 160
 1e4:	85 b9       	out	0x05, r24	; 5
	PORTB &= ~((1<<PB4)|(1<<PB0));
 1e6:	85 b1       	in	r24, 0x05	; 5
 1e8:	8e 7e       	andi	r24, 0xEE	; 238
 1ea:	85 b9       	out	0x05, r24	; 5

	// LIGA PWM
	OCR0B = 200;  
 1ec:	88 ec       	ldi	r24, 0xC8	; 200
 1ee:	88 bd       	out	0x28, r24	; 40
	OCR0A = 200;   
 1f0:	87 bd       	out	0x27, r24	; 39
 1f2:	08 95       	ret

000001f4 <ligaMotoresAntiHorario>:
}

void ligaMotoresAntiHorario(){
	// DEFINE DIREÇÃO: IN1=1, IN2=0 ; IN3=1, IN4=0
	PORTB |=  (1<<PB4)|(1<<PB0);
 1f4:	85 b1       	in	r24, 0x05	; 5
 1f6:	81 61       	ori	r24, 0x11	; 17
 1f8:	85 b9       	out	0x05, r24	; 5
	PORTB &= ~((1<<PB7)|(1<<PB5));
 1fa:	85 b1       	in	r24, 0x05	; 5
 1fc:	8f 75       	andi	r24, 0x5F	; 95
 1fe:	85 b9       	out	0x05, r24	; 5

	// LIGA PWM
	OCR0B = 200; 
 200:	88 ec       	ldi	r24, 0xC8	; 200
 202:	88 bd       	out	0x28, r24	; 40
	OCR0A = 200; 	
 204:	87 bd       	out	0x27, r24	; 39
 206:	08 95       	ret

00000208 <ligaMotoresMeiaForca>:
}

void ligaMotoresMeiaForca(){
	// DEFINE DIREÇÃO
	PORTB |=  (1<<PB7)|(1<<PB5);
 208:	85 b1       	in	r24, 0x05	; 5
 20a:	80 6a       	ori	r24, 0xA0	; 160
 20c:	85 b9       	out	0x05, r24	; 5
	PORTB &= ~((1<<PB4)|(1<<PB0));
 20e:	85 b1       	in	r24, 0x05	; 5
 210:	8e 7e       	andi	r24, 0xEE	; 238
 212:	85 b9       	out	0x05, r24	; 5

	// APLICANDO 50% DE FATOR DE CICLO
	OCR0B = 128;   // motor 1
 214:	80 e8       	ldi	r24, 0x80	; 128
 216:	88 bd       	out	0x28, r24	; 40
	OCR0A = 128;   // motor 2
 218:	87 bd       	out	0x27, r24	; 39
 21a:	08 95       	ret

0000021c <giraEsquerda>:
}

void giraEsquerda() {
	// MOTOR 1: ANTI-HORÁRIO (PB4)
	// MOTOR 2: HORÁRIO (PB5)
	PORTB |= (1 << PB4) | (1 << PB5);
 21c:	85 b1       	in	r24, 0x05	; 5
 21e:	80 63       	ori	r24, 0x30	; 48
 220:	85 b9       	out	0x05, r24	; 5
	PORTB &= ~((1 << PB7) | (1 << PB0));
 222:	85 b1       	in	r24, 0x05	; 5
 224:	8e 77       	andi	r24, 0x7E	; 126
 226:	85 b9       	out	0x05, r24	; 5

	// LIGA PWM
	OCR0B = 200;   // motor 1
 228:	88 ec       	ldi	r24, 0xC8	; 200
 22a:	88 bd       	out	0x28, r24	; 40
	OCR0A = 200;   // motor 2
 22c:	87 bd       	out	0x27, r24	; 39
 22e:	08 95       	ret

00000230 <giraDireita>:
}

void giraDireita() {
	// MOTOR 1: HORÁRIO (PB7)
	// MOTOR 2: ANTI-HORÁRIO (PB0)
	PORTB |= (1 << PB7) | (1 << PB0);
 230:	85 b1       	in	r24, 0x05	; 5
 232:	81 68       	ori	r24, 0x81	; 129
 234:	85 b9       	out	0x05, r24	; 5
	PORTB &= ~((1 << PB4) | (1 << PB5));
 236:	85 b1       	in	r24, 0x05	; 5
 238:	8f 7c       	andi	r24, 0xCF	; 207
 23a:	85 b9       	out	0x05, r24	; 5

	// LIGA PWM
	OCR0B = 200;   // motor 1
 23c:	88 ec       	ldi	r24, 0xC8	; 200
 23e:	88 bd       	out	0x28, r24	; 40
	OCR0A = 200;   // motor 2
 240:	87 bd       	out	0x27, r24	; 39
 242:	08 95       	ret

00000244 <pararMotores>:
}

void pararMotores() {
	OCR0A = 0;
 244:	17 bc       	out	0x27, r1	; 39
	OCR0B = 0;
 246:	18 bc       	out	0x28, r1	; 40
	PORTB &= ~((1 << PB7) | (1 << PB5) | (1 << PB4) | (1 << PB0));
 248:	85 b1       	in	r24, 0x05	; 5
 24a:	8e 74       	andi	r24, 0x4E	; 78
 24c:	85 b9       	out	0x05, r24	; 5
 24e:	08 95       	ret

00000250 <verificaSentido>:
}


void verificaSentido(){
	if (PIND & (1 << PD4)) {
 250:	4c 9b       	sbis	0x09, 4	; 9
 252:	03 c0       	rjmp	.+6      	; 0x25a <verificaSentido+0xa>
		ligaMotoresHorario();
 254:	0e 94 f0 00 	call	0x1e0	; 0x1e0 <ligaMotoresHorario>
 258:	08 95       	ret
	}
	else if (PINB & (1 << PB1)) {
 25a:	19 9b       	sbis	0x03, 1	; 3
 25c:	03 c0       	rjmp	.+6      	; 0x264 <verificaSentido+0x14>
		ligaMotoresAntiHorario();
 25e:	0e 94 fa 00 	call	0x1f4	; 0x1f4 <ligaMotoresAntiHorario>
 262:	08 95       	ret
	}else if (PINB & (1 << PB2)){
 264:	1a 9b       	sbis	0x03, 2	; 3
 266:	03 c0       	rjmp	.+6      	; 0x26e <verificaSentido+0x1e>
		ligaMotoresMeiaForca();  
 268:	0e 94 04 01 	call	0x208	; 0x208 <ligaMotoresMeiaForca>
 26c:	08 95       	ret
	}
	else {
		OCR0A = 0;
 26e:	17 bc       	out	0x27, r1	; 39
		OCR0B = 0;
 270:	18 bc       	out	0x28, r1	; 40
		PORTB &= ~((1 << PB7) | (1 << PB5) | (1 << PB4) | (1 << PB0));
 272:	85 b1       	in	r24, 0x05	; 5
 274:	8e 74       	andi	r24, 0x4E	; 78
 276:	85 b9       	out	0x05, r24	; 5
 278:	08 95       	ret

0000027a <timer1_init>:
}
//FIM ROTINA DOS MOTORES

//ROTINA LASER MODO CTC
void timer1_init() {
	TCCR1B |= (1 << WGM12);  // CTC
 27a:	e1 e8       	ldi	r30, 0x81	; 129
 27c:	f0 e0       	ldi	r31, 0x00	; 0
 27e:	80 81       	ld	r24, Z
 280:	88 60       	ori	r24, 0x08	; 8
 282:	80 83       	st	Z, r24
	OCR1A = 15624;           // 1 SEGUNDO P/ PRESCALER 1024
 284:	88 e0       	ldi	r24, 0x08	; 8
 286:	9d e3       	ldi	r25, 0x3D	; 61
 288:	90 93 89 00 	sts	0x0089, r25	; 0x800089 <__TEXT_REGION_LENGTH__+0x7f8089>
 28c:	80 93 88 00 	sts	0x0088, r24	; 0x800088 <__TEXT_REGION_LENGTH__+0x7f8088>
	TIMSK1 |= (1 << OCIE1A); 
 290:	af e6       	ldi	r26, 0x6F	; 111
 292:	b0 e0       	ldi	r27, 0x00	; 0
 294:	8c 91       	ld	r24, X
 296:	82 60       	ori	r24, 0x02	; 2
 298:	8c 93       	st	X, r24
	TCCR1B |= (1 << CS12) | (1 << CS10); 
 29a:	80 81       	ld	r24, Z
 29c:	85 60       	ori	r24, 0x05	; 5
 29e:	80 83       	st	Z, r24
	sei();
 2a0:	78 94       	sei
 2a2:	08 95       	ret

000002a4 <__vector_11>:
}

ISR(TIMER1_COMPA_vect) {
 2a4:	1f 92       	push	r1
 2a6:	0f 92       	push	r0
 2a8:	0f b6       	in	r0, 0x3f	; 63
 2aa:	0f 92       	push	r0
 2ac:	11 24       	eor	r1, r1
 2ae:	8f 93       	push	r24
 2b0:	9f 93       	push	r25
	PORTB ^= (1 << PB3);  // ALTERNA ESTADO DO LED
 2b2:	95 b1       	in	r25, 0x05	; 5
 2b4:	88 e0       	ldi	r24, 0x08	; 8
 2b6:	89 27       	eor	r24, r25
 2b8:	85 b9       	out	0x05, r24	; 5
}
 2ba:	9f 91       	pop	r25
 2bc:	8f 91       	pop	r24
 2be:	0f 90       	pop	r0
 2c0:	0f be       	out	0x3f, r0	; 63
 2c2:	0f 90       	pop	r0
 2c4:	1f 90       	pop	r1
 2c6:	18 95       	reti

000002c8 <UART_Init>:

//ROTINA CONTROLE BLUETOOTH
// INICIAALIZA UART EM 9600 BPS
void UART_Init(void) {
	uint16_t ubrr = 103; // 9600 BPS p/ 16 MHz
	UBRR0H = (unsigned char)(ubrr >> 8);
 2c8:	10 92 c5 00 	sts	0x00C5, r1	; 0x8000c5 <__TEXT_REGION_LENGTH__+0x7f80c5>
	UBRR0L = (unsigned char)ubrr;
 2cc:	87 e6       	ldi	r24, 0x67	; 103
 2ce:	80 93 c4 00 	sts	0x00C4, r24	; 0x8000c4 <__TEXT_REGION_LENGTH__+0x7f80c4>
	UCSR0B = (1 << RXEN0) | (1 << TXEN0);       // HABILITA RX E TX
 2d2:	88 e1       	ldi	r24, 0x18	; 24
 2d4:	80 93 c1 00 	sts	0x00C1, r24	; 0x8000c1 <__TEXT_REGION_LENGTH__+0x7f80c1>
	UCSR0C = (1 << UCSZ01) | (1 << UCSZ00);     // 8 BITS DE DADOS
 2d8:	86 e0       	ldi	r24, 0x06	; 6
 2da:	80 93 c2 00 	sts	0x00C2, r24	; 0x8000c2 <__TEXT_REGION_LENGTH__+0x7f80c2>
 2de:	08 95       	ret

000002e0 <UART_Receive>:
}
// RECEBE UM CARACTERA
char UART_Receive(void) {
	while (!(UCSR0A & (1 << RXC0))); // ESPERA DADO CHEGAR
 2e0:	80 91 c0 00 	lds	r24, 0x00C0	; 0x8000c0 <__TEXT_REGION_LENGTH__+0x7f80c0>
 2e4:	88 23       	and	r24, r24
 2e6:	e4 f7       	brge	.-8      	; 0x2e0 <UART_Receive>
	return UDR0;
 2e8:	80 91 c6 00 	lds	r24, 0x00C6	; 0x8000c6 <__TEXT_REGION_LENGTH__+0x7f80c6>
}
 2ec:	08 95       	ret

000002ee <UART_Transmit>:
// ENVIA 1 CARACTERE PELA UART
void UART_Transmit(char data) {
	while (!(UCSR0A & (1 << UDRE0))); // ESPERA BUFFER ESVAZIAR
 2ee:	90 91 c0 00 	lds	r25, 0x00C0	; 0x8000c0 <__TEXT_REGION_LENGTH__+0x7f80c0>
 2f2:	95 ff       	sbrs	r25, 5
 2f4:	fc cf       	rjmp	.-8      	; 0x2ee <UART_Transmit>
	UDR0 = data;
 2f6:	80 93 c6 00 	sts	0x00C6, r24	; 0x8000c6 <__TEXT_REGION_LENGTH__+0x7f80c6>
 2fa:	08 95       	ret

000002fc <UART_SendString>:
}

// ENVIA STRING PELA UART
void UART_SendString(const char *str) {
 2fc:	cf 93       	push	r28
 2fe:	df 93       	push	r29
 300:	ec 01       	movw	r28, r24
	while (*str) {
 302:	03 c0       	rjmp	.+6      	; 0x30a <UART_SendString+0xe>
		UART_Transmit(*str++);
 304:	21 96       	adiw	r28, 0x01	; 1
 306:	0e 94 77 01 	call	0x2ee	; 0x2ee <UART_Transmit>
	UDR0 = data;
}

// ENVIA STRING PELA UART
void UART_SendString(const char *str) {
	while (*str) {
 30a:	88 81       	ld	r24, Y
 30c:	81 11       	cpse	r24, r1
 30e:	fa cf       	rjmp	.-12     	; 0x304 <UART_SendString+0x8>
		UART_Transmit(*str++);
	}
}
 310:	df 91       	pop	r29
 312:	cf 91       	pop	r28
 314:	08 95       	ret

00000316 <UART_SendInt>:

// ENVIA INT COMO TEXTO PARA UART

void UART_SendInt(uint16_t value) {
 316:	cf 93       	push	r28
 318:	df 93       	push	r29
 31a:	cd b7       	in	r28, 0x3d	; 61
 31c:	de b7       	in	r29, 0x3e	; 62
 31e:	2a 97       	sbiw	r28, 0x0a	; 10
 320:	0f b6       	in	r0, 0x3f	; 63
 322:	f8 94       	cli
 324:	de bf       	out	0x3e, r29	; 62
 326:	0f be       	out	0x3f, r0	; 63
 328:	cd bf       	out	0x3d, r28	; 61
	char buffer[10];
	itoa(buffer, "%u", value);  // FUNÇÃO QUE CONVERTE INT PARA STRING 
 32a:	ac 01       	movw	r20, r24
 32c:	61 e0       	ldi	r22, 0x01	; 1
 32e:	71 e0       	ldi	r23, 0x01	; 1
 330:	ce 01       	movw	r24, r28
 332:	01 96       	adiw	r24, 0x01	; 1
 334:	0e 94 1d 02 	call	0x43a	; 0x43a <itoa>
	UART_SendString(buffer);
 338:	ce 01       	movw	r24, r28
 33a:	01 96       	adiw	r24, 0x01	; 1
 33c:	0e 94 7e 01 	call	0x2fc	; 0x2fc <UART_SendString>
}
 340:	2a 96       	adiw	r28, 0x0a	; 10
 342:	0f b6       	in	r0, 0x3f	; 63
 344:	f8 94       	cli
 346:	de bf       	out	0x3e, r29	; 62
 348:	0f be       	out	0x3f, r0	; 63
 34a:	cd bf       	out	0x3d, r28	; 61
 34c:	df 91       	pop	r29
 34e:	cf 91       	pop	r28
 350:	08 95       	ret

00000352 <controle>:


void controle(){
	char comando = UART_Receive(); // ESPERA COMANDO DO BLUETOOTH
 352:	0e 94 70 01 	call	0x2e0	; 0x2e0 <UART_Receive>
    switch (comando) {
 356:	90 e0       	ldi	r25, 0x00	; 0
 358:	fc 01       	movw	r30, r24
 35a:	e2 54       	subi	r30, 0x42	; 66
 35c:	f1 09       	sbc	r31, r1
 35e:	e1 33       	cpi	r30, 0x31	; 49
 360:	f1 05       	cpc	r31, r1
 362:	e0 f4       	brcc	.+56     	; 0x39c <controle+0x4a>
 364:	ec 5c       	subi	r30, 0xCC	; 204
 366:	ff 4f       	sbci	r31, 0xFF	; 255
 368:	0c 94 17 02 	jmp	0x42e	; 0x42e <__tablejump2__>
	    case 'F': // PARA CIMA
	    case 'f':
			ligaMotoresHorario();
 36c:	0e 94 f0 00 	call	0x1e0	; 0x1e0 <ligaMotoresHorario>
			PORTD |= (1 << PD2);
 370:	8b b1       	in	r24, 0x0b	; 11
 372:	84 60       	ori	r24, 0x04	; 4
 374:	8b b9       	out	0x0b, r24	; 11
			break;
 376:	08 95       	ret

	    case 'B': // PARA BAIXO
	    case 'b':
			ligaMotoresAntiHorario();
 378:	0e 94 fa 00 	call	0x1f4	; 0x1f4 <ligaMotoresAntiHorario>
			PORTD |= (1 << PD2);
 37c:	8b b1       	in	r24, 0x0b	; 11
 37e:	84 60       	ori	r24, 0x04	; 4
 380:	8b b9       	out	0x0b, r24	; 11
			break;
 382:	08 95       	ret

	    case 'L': // PARA ESQUERDA
	    case 'l':
			giraEsquerda();
 384:	0e 94 0e 01 	call	0x21c	; 0x21c <giraEsquerda>
			PORTD |= (1 << PD2);
 388:	8b b1       	in	r24, 0x0b	; 11
 38a:	84 60       	ori	r24, 0x04	; 4
 38c:	8b b9       	out	0x0b, r24	; 11
			break;
 38e:	08 95       	ret

	    case 'R': // PARA DIREITA
	    case 'r':
			giraDireita();
 390:	0e 94 18 01 	call	0x230	; 0x230 <giraDireita>
			PORTD |= (1 << PD2);
 394:	8b b1       	in	r24, 0x0b	; 11
 396:	84 60       	ori	r24, 0x04	; 4
 398:	8b b9       	out	0x0b, r24	; 11

			break;
 39a:	08 95       	ret

	    default:
			pararMotores();
 39c:	0e 94 22 01 	call	0x244	; 0x244 <pararMotores>
 3a0:	08 95       	ret

000003a2 <main>:


int main(void)
{
	// SETANDO TODAS AS PORTAS
	ledsVida(); 
 3a2:	0e 94 7c 00 	call	0xf8	; 0xf8 <ledsVida>
	motores(); 
 3a6:	0e 94 8f 00 	call	0x11e	; 0x11e <motores>
	botoes(); 
 3aa:	0e 94 a8 00 	call	0x150	; 0x150 <botoes>
	laser(); 
 3ae:	0e 94 b2 00 	call	0x164	; 0x164 <laser>
	
	// ROTINA LDR
	adc_init();
 3b2:	0e 94 b6 00 	call	0x16c	; 0x16c <adc_init>
	// FIM ROTINA LDR


	//PORTB &= ~((1 << PB7) | (1 << PB5) | (1 << PB4) | (1 << PB0));
    // FAST PWM NO TIMER 0
    TCCR0A = (1<<COM0A1)|(1<<COM0B1)|(1<<WGM01)|(1<<WGM00);
 3b6:	83 ea       	ldi	r24, 0xA3	; 163
 3b8:	84 bd       	out	0x24, r24	; 36
    TCCR0B = (1<<CS01);    // PRESCALER = 8
 3ba:	82 e0       	ldi	r24, 0x02	; 2
 3bc:	85 bd       	out	0x25, r24	; 37

    //GARANTE QUE VAI COMEÇAR COM MOTORES DESLIGADOS
    OCR0A = 0; 
 3be:	17 bc       	out	0x27, r1	; 39
    OCR0B = 0;  
 3c0:	18 bc       	out	0x28, r1	; 40

	
	//LASER
	timer1_init();
 3c2:	0e 94 3d 01 	call	0x27a	; 0x27a <timer1_init>

	// CONTROLE 
	UART_Init();
 3c6:	0e 94 64 01 	call	0x2c8	; 0x2c8 <UART_Init>
	
	DDRD |= (1 << PD2); // teste ldr
 3ca:	8a b1       	in	r24, 0x0a	; 10
 3cc:	84 60       	ori	r24, 0x04	; 4
 3ce:	8a b9       	out	0x0a, r24	; 10

    while (1) 
    {
		//ROTINA LDR
		valorLDR = adc_read(4); // LÊ O ADC4 (PC4)
 3d0:	84 e0       	ldi	r24, 0x04	; 4
 3d2:	0e 94 bd 00 	call	0x17a	; 0x17a <adc_read>
 3d6:	ec 01       	movw	r28, r24
		// debug ldr
		UART_SendString("LDR = ");
 3d8:	84 e0       	ldi	r24, 0x04	; 4
 3da:	91 e0       	ldi	r25, 0x01	; 1
 3dc:	0e 94 7e 01 	call	0x2fc	; 0x2fc <UART_SendString>
		UART_SendInt(valorLDR);
 3e0:	ce 01       	movw	r24, r28
 3e2:	0e 94 8b 01 	call	0x316	; 0x316 <UART_SendInt>
		UART_SendString("\r\n");	
 3e6:	8b e0       	ldi	r24, 0x0B	; 11
 3e8:	91 e0       	ldi	r25, 0x01	; 1
 3ea:	0e 94 7e 01 	call	0x2fc	; 0x2fc <UART_SendString>
		// debug ldr

		if (valorLDR > 300) {
 3ee:	cd 32       	cpi	r28, 0x2D	; 45
 3f0:	d1 40       	sbci	r29, 0x01	; 1
 3f2:	28 f0       	brcs	.+10     	; 0x3fe <main+0x5c>
			luzAlta = 1; // LDR RECEBEU VALOR ALTO
			PORTD |= (1 << PD2);
 3f4:	8b b1       	in	r24, 0x0b	; 11
 3f6:	84 60       	ori	r24, 0x04	; 4
 3f8:	8b b9       	out	0x0b, r24	; 11
		UART_SendInt(valorLDR);
		UART_SendString("\r\n");	
		// debug ldr

		if (valorLDR > 300) {
			luzAlta = 1; // LDR RECEBEU VALOR ALTO
 3fa:	81 e0       	ldi	r24, 0x01	; 1
 3fc:	04 c0       	rjmp	.+8      	; 0x406 <__EEPROM_REGION_LENGTH__+0x6>
			PORTD |= (1 << PD2);
		} else{
			luzAlta = 0;
			PORTD &= ~(1 << PD2);
 3fe:	8b b1       	in	r24, 0x0b	; 11
 400:	8b 7f       	andi	r24, 0xFB	; 251
 402:	8b b9       	out	0x0b, r24	; 11

		if (valorLDR > 300) {
			luzAlta = 1; // LDR RECEBEU VALOR ALTO
			PORTD |= (1 << PD2);
		} else{
			luzAlta = 0;
 404:	80 e0       	ldi	r24, 0x00	; 0
			PORTD &= ~(1 << PD2);
		}
		if (luzAlta){
 406:	88 23       	and	r24, r24
 408:	39 f0       	breq	.+14     	; 0x418 <__EEPROM_REGION_LENGTH__+0x18>
			if(vidas>0){
 40a:	80 91 00 01 	lds	r24, 0x0100	; 0x800100 <__DATA_REGION_ORIGIN__>
 40e:	88 23       	and	r24, r24
 410:	19 f0       	breq	.+6      	; 0x418 <__EEPROM_REGION_LENGTH__+0x18>
			vidas = vidas -1;
 412:	81 50       	subi	r24, 0x01	; 1
 414:	80 93 00 01 	sts	0x0100, r24	; 0x800100 <__DATA_REGION_ORIGIN__>
			}
		}
		atualizaLedsVida();
 418:	0e 94 d2 00 	call	0x1a4	; 0x1a4 <atualizaLedsVida>
		verificaSentido();								
 41c:	0e 94 28 01 	call	0x250	; 0x250 <verificaSentido>
		
		if (UCSR0A & (1 << RXC0)) { // SE HOUVER ALGO EM UART
 420:	80 91 c0 00 	lds	r24, 0x00C0	; 0x8000c0 <__TEXT_REGION_LENGTH__+0x7f80c0>
 424:	88 23       	and	r24, r24
 426:	a4 f6       	brge	.-88     	; 0x3d0 <main+0x2e>
			controle(); // CHAMA CONTROLE
 428:	0e 94 a9 01 	call	0x352	; 0x352 <controle>
 42c:	d1 cf       	rjmp	.-94     	; 0x3d0 <main+0x2e>

0000042e <__tablejump2__>:
 42e:	ee 0f       	add	r30, r30
 430:	ff 1f       	adc	r31, r31
 432:	05 90       	lpm	r0, Z+
 434:	f4 91       	lpm	r31, Z
 436:	e0 2d       	mov	r30, r0
 438:	09 94       	ijmp

0000043a <itoa>:
 43a:	45 32       	cpi	r20, 0x25	; 37
 43c:	51 05       	cpc	r21, r1
 43e:	20 f4       	brcc	.+8      	; 0x448 <itoa+0xe>
 440:	42 30       	cpi	r20, 0x02	; 2
 442:	10 f0       	brcs	.+4      	; 0x448 <itoa+0xe>
 444:	0c 94 28 02 	jmp	0x450	; 0x450 <__itoa_ncheck>
 448:	fb 01       	movw	r30, r22
 44a:	10 82       	st	Z, r1
 44c:	cb 01       	movw	r24, r22
 44e:	08 95       	ret

00000450 <__itoa_ncheck>:
 450:	bb 27       	eor	r27, r27
 452:	4a 30       	cpi	r20, 0x0A	; 10
 454:	31 f4       	brne	.+12     	; 0x462 <__itoa_ncheck+0x12>
 456:	99 23       	and	r25, r25
 458:	22 f4       	brpl	.+8      	; 0x462 <__itoa_ncheck+0x12>
 45a:	bd e2       	ldi	r27, 0x2D	; 45
 45c:	90 95       	com	r25
 45e:	81 95       	neg	r24
 460:	9f 4f       	sbci	r25, 0xFF	; 255
 462:	0c 94 34 02 	jmp	0x468	; 0x468 <__utoa_common>

00000466 <__utoa_ncheck>:
 466:	bb 27       	eor	r27, r27

00000468 <__utoa_common>:
 468:	fb 01       	movw	r30, r22
 46a:	55 27       	eor	r21, r21
 46c:	aa 27       	eor	r26, r26
 46e:	88 0f       	add	r24, r24
 470:	99 1f       	adc	r25, r25
 472:	aa 1f       	adc	r26, r26
 474:	a4 17       	cp	r26, r20
 476:	10 f0       	brcs	.+4      	; 0x47c <__utoa_common+0x14>
 478:	a4 1b       	sub	r26, r20
 47a:	83 95       	inc	r24
 47c:	50 51       	subi	r21, 0x10	; 16
 47e:	b9 f7       	brne	.-18     	; 0x46e <__utoa_common+0x6>
 480:	a0 5d       	subi	r26, 0xD0	; 208
 482:	aa 33       	cpi	r26, 0x3A	; 58
 484:	08 f0       	brcs	.+2      	; 0x488 <__utoa_common+0x20>
 486:	a9 5d       	subi	r26, 0xD9	; 217
 488:	a1 93       	st	Z+, r26
 48a:	00 97       	sbiw	r24, 0x00	; 0
 48c:	79 f7       	brne	.-34     	; 0x46c <__utoa_common+0x4>
 48e:	b1 11       	cpse	r27, r1
 490:	b1 93       	st	Z+, r27
 492:	11 92       	st	Z+, r1
 494:	cb 01       	movw	r24, r22
 496:	0c 94 4d 02 	jmp	0x49a	; 0x49a <strrev>

0000049a <strrev>:
 49a:	dc 01       	movw	r26, r24
 49c:	fc 01       	movw	r30, r24
 49e:	67 2f       	mov	r22, r23
 4a0:	71 91       	ld	r23, Z+
 4a2:	77 23       	and	r23, r23
 4a4:	e1 f7       	brne	.-8      	; 0x49e <strrev+0x4>
 4a6:	32 97       	sbiw	r30, 0x02	; 2
 4a8:	04 c0       	rjmp	.+8      	; 0x4b2 <strrev+0x18>
 4aa:	7c 91       	ld	r23, X
 4ac:	6d 93       	st	X+, r22
 4ae:	70 83       	st	Z, r23
 4b0:	62 91       	ld	r22, -Z
 4b2:	ae 17       	cp	r26, r30
 4b4:	bf 07       	cpc	r27, r31
 4b6:	c8 f3       	brcs	.-14     	; 0x4aa <strrev+0x10>
 4b8:	08 95       	ret

000004ba <_exit>:
 4ba:	f8 94       	cli

000004bc <__stop_program>:
 4bc:	ff cf       	rjmp	.-2      	; 0x4bc <__stop_program>
